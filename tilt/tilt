#!/bin/sh

etcdir=/usr/local/etc/tcs
tmpdir="/tmp/tilt"

B=2

if false
then

 cd $tmpdir

else

rm -rf $tmpdir
mkdir $tmpdir

echo 1>&2 "tilt: getting FITS images."
mkdir $tmpdir/inputs
for file in "$@"
do
  case $file in
  *.fits)
    cp $file $tmpdir/inputs
    ;;
  *.fits.fz)
    funpack -O $tmpdir/inputs/$(basename $file .fz) $file
    ;;
  esac
done

cd $tmpdir

echo 1>&2 "tilt: binning."
for fitsfile in inputs/*
do
  fimgbin $fitsfile $fitsfile $B clobber+ average+
done

mkdir cats
for fitsfile in inputs/*
do
  echo 1>&2 "tilt: running sextractor on $(basename "$fitsfile")."
  catfile=cats/$(basename "$fitsfile")
  sex "$fitsfile" \
    -c "$etcdir"/fitsfwhm.sex \
    -PARAMETERS_NAME "$etcdir"/tcs/fitsfwhm.param \
    -SATUR_LEVEL 2048 \
    -CATALOG_NAME STDOUT 2>&- |
    sort -k 4n >$catfile
done

fi

N=6
median=0

(
  awk -v N=$N -v B=$B '
  BEGIN {
    M = int(6 * 1024 / N);
    for (iy = N - 1; iy >= 0; --iy) {
      for (ix = 0; ix < N; ++ix) {
        sx = ix * M;
        nx = M;
        sy = 54 + iy * M;
        ny = M;
        sx = int(sx / B);
        sy = int(sy / B);
        nx = int(nx / B);
        ny = int(ny / B)
        printf("%d %d %d %d\n", sx + 1, sx + nx, sy + 1, sy + ny);
      }
    }
  }
  ' /dev/null
) |
while read xmin xmax ymin ymax
do
  echo "info: section [$xmin:$xmax,$ymin:$ymax]."
  for fitsfile in inputs/*
  do
    catfile=cats/$(basename "$fitsfile")
    echo $(fitsheadervalue SFCPS "$fitsfile") $(
      awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax '
      {
        x = $1;
        y = $2;
        if (xmin <= x && x <= xmax && ymin <= y && y <= ymax) {
          print $0;
        }
      }
      ' $catfile |
      tee cats/$xmin-$xmax-$ymin-$ymax.txt |
      awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v median=$median '
      BEGIN {
        ibrightest = "";
        i = 0;
        xmean = (xmin + xmax) / 2;
        ymean = (ymin + ymax) / 2;
      }
      {
        flags = $5;
        if (flags < 2) {
          x[i]    = $1;
          y[i]    = $2;
          fwhm[i] = $3;
          mag[i]  = $4;
          if (ibrightest == "" || mag[i] <= mag[ibrightest]) {
            ibrightest = i;
          }
          ++i;
        }
      }
      END {
        if (!median) {
          iselected = ibrightest
        } else if (i > 0) {
          iselected = int(i / 2);
        } else {
          iselected = "";
        }
        if (iselected != "") {
          printf("%6.2f %6.2f %6.2f %6.2f %6.2f\n", fwhm[iselected], x[iselected], y[iselected], xmean, ymean);
        }
      }
      '
    )
  done |
  awk '
  BEGIN{
    maxabschi = 2.0
    maxw = 15.0
    i = 0;
    n = 0;
  }
  {
    printf("info: %s\n", $0);
    if ($2 > 0) {
      z[i] = $1;
      w[i] = $2;
      xmean = $5;
      ymean = $6;
      chi[i] = 0.0;
      ++i;
      ++n;
    }
  }
  END {
    chi[0] = 100;
    chi[n - 1] = 100;
    for (iteration = 0; iteration < 3; ++iteration) {
      fit();
      sdww = 0.0;
      for (i = 0; i < n; ++i) {
        dw = w[i] - (a + b * z[i] + c * z[i] * z[i]);
        sdww += dw * dw;
      }
      sigma = sqrt(sdww / (n - 1));
      for (i = 0; i < n; ++i) {
        dw = w[i] - (a + b * z[i] + c * z[i] * z[i]);
        if (sigma != 0.0)
          chi[i] = dw / sigma;
        else
          chi[i] = 0.0;
      }
    }
    for (i = 0; i < n; ++i) {
      if (w[i] <= maxw && abs(chi[i]) <= maxabschi) {
        printf("info: FWHM = %4.1f pixels at %d (chi = %+6.2f)\n", w[i], z[i], chi[i]);
      } else {
        printf("info: FWHM = %4.1f pixels at %d (chi = %+6.2f rejected)\n", w[i], z[i], chi[i]);
      }
    }
    minz = (-b / (2 * c));
    minw = a + b * minz + c * minz * minz;
    if (c < 0) {
      printf("info: error: turning point is a maximum.\n")
      minz = 0;
      minw = 0;
    } else {
      printf("info: model minimum: FWHM = %.1f pixels at %d.\n", minw, minz);
    }
    printf("%.0f %.2f %6.1f %6.1f\n", minz, minw, xmean, ymean);
  }

  function abs(x)
  {
    if (x < 0)
      return -x;
    else
      return +x;
  }

  function fit() 
  {
    S00 = 0.0;
    S10 = 0.0;
    S20 = 0.0;
    S30 = 0.0;
    S40 = 0.0;
    S01 = 0.0;
    S11 = 0.0;
    S21 = 0.0;
    for (i = 0; i < n; ++i) {
      if (w[i] <= maxw && abs(chi[i]) <= maxabschi) {
        S00 += 1;
        S10 += z[i];
        S20 += z[i] * z[i];
        S30 += z[i] * z[i] * z[i];
        S40 += z[i] * z[i] * z[i] * z[i];
        S01 += w[i];
        S11 += z[i] * w[i];
        S21 += z[i] * z[i] * w[i];
      }
    }
    A0 = S01 * S10 - S11 * S00;
    B0 = S10 * S10 - S20 * S00;
    C0 = S20 * S10 - S30 * S00;
    A1 = S11 * S20 - S21 * S10;
    B1 = S20 * S20 - S30 * S10;
    C1 = S30 * S20 - S40 * S10;
    c = (A0 * B1 - A1 * B0) / (B1 * C0 - B0 * C1);
    b = (A0 - C0 * c) / B0;
    a = (S01 - S10 * b - S20 * c) / S00;
  }
  '
done |
awk -v N=$N '
BEGIN {
  i = 0;
  n = 0;
  zmin = 20000;
  zmax = 50000;
}
{
  print;
}
$1 != "info:" {
  z[i] = $1;
  w[i] = $2;
  x[i] = $3;
  y[i] = $4;
  if (z[i] != "" && z[i] > zmin && z[i] < zmax)
    accept[i] = 1;
  else
    accept[i] = 0;
  ++i;
  ++n;
}

END {

  printf("w:\n");
  for (i = 0; i < n; ++i) {
    printf("%5.2f", w[i]);
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }

  printf("z:\n");
  for (i = 0; i < n; ++i) {
    printf("%5.0f", z[i]);
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }
  
  s = 0;
  sz = 0;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      sz += z[i];
      s  += 1;
    }
  }
  zmean = sz / s;
  printf("zmean = %5.0f\n", zmean);
  for (i = 0; i < n; ++i) {
    if (accept[i])
      z[i] -= zmean;
  }
  printf("relative z:\n");
  for (i = 0; i < n; ++i) {
    if (accept[i])
      printf("%+5.0f", z[i]);
    else
      printf("     ");
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }

  s = 0;
  sx = sz = 0;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      sx += x[i];
      sz += z[i];
      s  += 1;
    }
  }
  xmean = sx / s;
  zmean = sz / s;
  sxx = sxz = 0;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      dx = x[i] - xmean;
      dz = z[i] - zmean;
      sdxx += dx * dx;
      sdxz += dx * dz;
    }
  }
  bx = sdxz / sdxx;
  ax = zmean - bx * xmean;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      z[i] -= ax + bx * x[i];
    }
  }
  print "x fit", ax, bx;

if (0) {

  printf("fitted x plane z:\n");
  for (i = 0; i < n; ++i) {
    zmodel = ax + bx * x[i];
    printf("%5.0f", zmodel);
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }
  
  printf("residual about fitted x plane z:\n");
  for (i = 0; i < n; ++i) {
    if (accept[i])
      printf("%+5.0f", z[i]);
    else
      printf("     ");
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }

}

  s = 0;
  sy = sz = 0;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      sy += y[i];
      sz += z[i];
      s  += 1;
    }
  }
  ymean = sy / s;
  zmean = sz / s;
  syy = syz = 0;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      dy = y[i] - ymean;
      dz = z[i] - zmean;
      sdyy += dy * dy;
      sdyz += dy * dz;
    }
  }
  by = sdyz / sdyy;
  ay = zmean - by * ymean;
  for (i = 0; i < n; ++i) {
    if (accept[i]) {
      z[i] -= ay + by * y[i];
    }
  }
  print "y fit", ay, by;
 
  printf("fitted xy plane z:\n");
  for (i = 0; i < n; ++i) {
    zmodel = ax + bx * x[i] + ay + by * y[i];
    printf("%5.0f", zmodel);
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }
  
  printf("residual about fitted xy plane z:\n");
  for (i = 0; i < n; ++i) {
    if (accept[i])
      printf("%+5.0f", z[i]);
    else
      printf("     ");
    if (i % N == N - 1)
      printf("\n");
    else
      printf("  ");
  }
  

}' >tilt.txt
grep -v info tilt.txt

exit 0
