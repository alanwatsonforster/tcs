########################################################################

# This file is part of the UNAM telescope control system.

# $Id: client.tcl 3335 2019-07-01 18:45:22Z Alan $

########################################################################

# Copyright Â© 2019 Alan M. Watson <alan@astro.unam.mx>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
# PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

########################################################################

# This package handles JSON-RPC 2.0 for tcs. It not a general JSON-RPC
# 2.0 package. It has the following restrictions:
#
# - The id must be a string. This is guaranteed for requests generated by the request procedure.
#
# - The method must be a string.
#
# - The params must be a (possible empty) list of strings.
#
# - The result must be a (possible empty) object whose values are strings.

package require "tojson"
package require "fromjson"

package provide "jsonrpc" 0.0

namespace eval "jsonrpc" {

  variable svnid {$Id}
  
  ########################################################################
  
  # Create requests, notifications, and responses as dicts.
  
  variable idsequence 0

  proc request {method {params {}}} {
    global argv0
    variable idsequence
    set id "[info hostname]/[file tail $argv0]/[pid]/$idsequence"
    set idsequence [expr {$idsequence + 1}]
    if {[llength $params] == 0} {
      return [dict create \
        "jsonrpc" "2.0" \
        "id"      $id \
        "method"  $method \
      ]
    } else {
      return [dict create \
        "jsonrpc" "2.0" \
        "id"      $id \
        "method"  $method \
        "params"  $params \
      ]
    }
  }
  
  proc notification {method {params {}}} {
    if {[llength $params] == 0} {
      return [dict create \
        "jsonrpc" "2.0" \
        "method"  $method \
      ]
    } else {
      return [dict create \
        "jsonrpc" "2.0" \
        "method"  $method \
        "params"  $params \
      ]
    }
  }
  
  proc response {request result} {
    return [dict create \
      "jsonrpc" "2.0" \
      "id"      [getid $request] \
      "result"  $result \
    ]
  }
  
  proc errorresponse {request code message} {
    return [dict create \
      "jsonrpc" "2.0" \
      "id"      [getid $request] \
      "error"   [dict create "code" $code "message" $message] \
    ]
  }
  
  ########################################################################
  
  # Convert requests and responses to strings containing the corresponding JSON representation.

  proc requeststring {request} {
    set jsonrpc [getjsonrpc $request]
    set id      [getid $request]
    set method  [getmethod $request]
    set params  [getparams $request]
    if {[llength $params] == 0} {
      return [tojson::object [dict create \
        "jsonrpc" [tojson::string $jsonrpc] \
        "id"      [tojson::string $id] \
        "method"  [tojson::string $method] \
      ]]
    } else {
      return [tojson::object [dict create \
        "jsonrpc" [tojson::string $jsonrpc] \
        "id"      [tojson::string $id] \
        "method"  [tojson::string $method] \
        "params"  [tojson::array $params string] \
      ]]
    }
  }
  
  proc notificationstring {request} {
    set jsonrpc [getjsonrpc $request]
    set method  [getmethod $request]
    set params  [getparams $request]
    if {[llength $params] == 0} {
      return [tojson::object [dict create \
        "jsonrpc" [tojson::string $jsonrpc] \
        "method"  [tojson::string $method] \
      ]]
    } else {
      return [tojson::object [dict create \
        "jsonrpc" [tojson::string $jsonrpc] \
        "method"  [tojson::string $method] \
        "params"  [tojson::array $params string] \
      ]]
    }
  }
  
  proc responsestring {response} {
    if {[iserrorresponse $response]} {
      return [tojson::object [dict create \
        "jsonrpc" [tojson::string [getjsonrpc $response]] \
        "id"      [tojson::string [getid $response]] \
        "error"   [tojson::object [dict create \
          "code"    [geterrorcode $response] \
          "message" [tojson::string [geterrormessage $response]]\
        ]] \
      ]]
    } else {
      return [tojson::object [dict create \
        "jsonrpc" [tojson::string [getjsonrpc $response]] \
        "id"      [tojson::string [getid $response]] \
        "result"  [tojson::object [getresult $response] string] \
      ]]  
    }
  }
  
  ########################################################################
  
  # Convert strings containing the JSON representation of requests and responses to dicts.

  proc parserequest {requeststring} {
    if {[catch {set request [fromjson::parse $requeststring]}]} {
      error [jsonrpc::errorresponse {} -32700 "parse error."]
    } elseif {![isvalidrequest $request]} {
      error [jsonrpc::errorresponse $request -32600 "invalid request."]
    } else {
      return $request
    }
  }
  
  proc parsenotification {requeststring} {
    if {[catch {set request [fromjson::parse $requeststring]}]} {
      error "parse error."
    } elseif {![isvalidnotification $request]} {
      error "invalid notification."
    } else {
      return $request
    }
  }
  
  proc parseresponse {responsestring} {
    if {[catch {set response [fromjson::parse $responsestring]}]} {
      error "parse error."
    } elseif {![isvalidresponse $response]} {
      error "invalid response."
    } else {
      return $response
    }
  }
  
  ########################################################################

  proc isvalidrequest {request} {
    if {
      [dict exists $request "jsonrpc"] &&
      [string equal [dict get $request "jsonrpc"] "2.0"] &&
      [dict exists $request "method"] &&
      [dict exists $request "id"]
    } {
      return true
    } else {
      return false
    }
  }
  
  proc isvalidnotification {request} {
    if {
      [dict exists $request "jsonrpc"] &&
      [string equal [dict get $request "jsonrpc"] "2.0"] &&
      [dict exists $request "method"] &&
      ![dict exists $request "id"]
    } {
      return true
    } else {
      return false
    }
  }
  
  proc isvalidresponse {response} {
    if {
      [dict exists $response "jsonrpc"] &&
      [string equal [dict get $response "jsonrpc"] "2.0"] &&
      ([dict exists $response "result"] || [dict exists $response "error"]) &&
      !([dict exists $response "result"] && [dict exists $response "error"]) &&
      [dict exists $response "id"]
    } {
      return true
    } else {
      return false
    }
  }
  
  proc iserrorresponse {response} {
    if {[dict exists $response "error"]} {
      return true
    } else {
      return false
    }
  }
  
  proc isvalidresponseid {response request} {
    if {[string equal [getid $response] [getid $request]]} {
      return true
    } else {
      return false
    }
  }
  
  ########################################################################

  proc getjsonrpc {requestorresponse} {
    return [dict get $requestorresponse "jsonrpc"]
  }
  
  proc getid {requestorresponse} {
    if {[dict exists $requestorresponse "id"]} {
      return [dict get $requestorresponse "id"]
    } else {
      return ""
    }
  }
  
  proc getmethod {requestorresponse} {
    return [dict get $requestorresponse "method"]
  }
  
  proc getparams {request} {
    if {[dict exists $request "params"]} {
      return [dict get $request "params"]
    } else {
      return {}
    }
  }

  proc getresult {response} {
    if {[dict exists $response "result"]} {
      return [dict get $response "result"]
    } else {
      return {}
    }
  }

  proc geterrorcode {response} {
   return [dict get [dict get $response "error"] "code"]
  }

  proc geterrormessage {response} {
    return [dict get [dict get $response "error"] "message"]
  }

  ########################################################################
  
  proc getserversfilename {} {
    return [file join [directories::etc] "servers.json"]
  }
  
  ########################################################################

  variable haveserversdict false
  variable serversdict     {}
  
  proc getserversdict {} {
    set filename [getserversfilename]
    if {![file exists $filename]} {
      error "servers file \"$filename\" does not exist."
    }
    if {[catch {set channel [open $filename "r"]}]} {
      error "servers file \"$filename\" cannot be opened."
    }
    chan configure $channel -encoding "utf-8"
    chan configure $channel -buffering "line"
    if {[catch {set maybeserversdict [fromjson::read $channel]}]} {
      error "servers file \"$filename\" is invalid: parse error."
    }
    close $channel
    foreach servername [dict keys $maybeserversdict] {
      set serverdict [dict get $maybeserversdict $servername]
      if {![dict exists $serverdict "host"]} {
        error "servers file \"$filename\" is invalid: no host member for server \"$servername\"."
      }
      if {![dict exists $serverdict "port"]} {
        error "the servers file \"$filename\" is invalid: no port member for server \"$servername\"."
      }
      if {![string is integer -strict [dict get $serverdict "port"]]} {
        error "the servers file \"$filename\" is invalid: port member for server \"$servername\" is not an integer."
      }
    }
    return $maybeserversdict
  }
      
  proc getserverhost {servername} {
    variable serversdict
    variable haveserversdict
    if {!$haveserversdict} {
      set serversdict [getserversdict]
      set haveserversdict true
    }
    if {![dict exists $serversdict $servername]} {
      error "invalid server name \"$servername\""
    } else {
      return [dict get [dict get $serversdict $servername] "host"]
    }
  }

  proc getserverport {servername} {
    variable serversdict
    variable haveserversdict
    if {!$haveserversdict} {
      set serversdict [getserversdict]
      set haveserversdict true
    }
    if {![dict exists $serversdict $servername]} {
      error "invalid server name \"$servername\""
    } else {
      return [dict get [dict get $serversdict $servername] "port"]
    }
  }

  ########################################################################

}
